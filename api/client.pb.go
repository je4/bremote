// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BrowserInitFlag struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*BrowserInitFlag_Strval
	//	*BrowserInitFlag_Bval
	Value                isBrowserInitFlag_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BrowserInitFlag) Reset()         { *m = BrowserInitFlag{} }
func (m *BrowserInitFlag) String() string { return proto.CompactTextString(m) }
func (*BrowserInitFlag) ProtoMessage()    {}
func (*BrowserInitFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}

func (m *BrowserInitFlag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserInitFlag.Unmarshal(m, b)
}
func (m *BrowserInitFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserInitFlag.Marshal(b, m, deterministic)
}
func (m *BrowserInitFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserInitFlag.Merge(m, src)
}
func (m *BrowserInitFlag) XXX_Size() int {
	return xxx_messageInfo_BrowserInitFlag.Size(m)
}
func (m *BrowserInitFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserInitFlag.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserInitFlag proto.InternalMessageInfo

func (m *BrowserInitFlag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isBrowserInitFlag_Value interface {
	isBrowserInitFlag_Value()
}

type BrowserInitFlag_Strval struct {
	Strval string `protobuf:"bytes,2,opt,name=strval,proto3,oneof"`
}

type BrowserInitFlag_Bval struct {
	Bval bool `protobuf:"varint,3,opt,name=bval,proto3,oneof"`
}

func (*BrowserInitFlag_Strval) isBrowserInitFlag_Value() {}

func (*BrowserInitFlag_Bval) isBrowserInitFlag_Value() {}

func (m *BrowserInitFlag) GetValue() isBrowserInitFlag_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserInitFlag) GetStrval() string {
	if x, ok := m.GetValue().(*BrowserInitFlag_Strval); ok {
		return x.Strval
	}
	return ""
}

func (m *BrowserInitFlag) GetBval() bool {
	if x, ok := m.GetValue().(*BrowserInitFlag_Bval); ok {
		return x.Bval
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BrowserInitFlag) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BrowserInitFlag_Strval)(nil),
		(*BrowserInitFlag_Bval)(nil),
	}
}

type NavigateParam struct {
	Url                  string   `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	NextStatus           string   `protobuf:"bytes,2,opt,name=NextStatus,proto3" json:"NextStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NavigateParam) Reset()         { *m = NavigateParam{} }
func (m *NavigateParam) String() string { return proto.CompactTextString(m) }
func (*NavigateParam) ProtoMessage()    {}
func (*NavigateParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}

func (m *NavigateParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavigateParam.Unmarshal(m, b)
}
func (m *NavigateParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavigateParam.Marshal(b, m, deterministic)
}
func (m *NavigateParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavigateParam.Merge(m, src)
}
func (m *NavigateParam) XXX_Size() int {
	return xxx_messageInfo_NavigateParam.Size(m)
}
func (m *NavigateParam) XXX_DiscardUnknown() {
	xxx_messageInfo_NavigateParam.DiscardUnknown(m)
}

var xxx_messageInfo_NavigateParam proto.InternalMessageInfo

func (m *NavigateParam) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NavigateParam) GetNextStatus() string {
	if m != nil {
		return m.NextStatus
	}
	return ""
}

type BrowserInitFlags struct {
	Flags                []*BrowserInitFlag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BrowserInitFlags) Reset()         { *m = BrowserInitFlags{} }
func (m *BrowserInitFlags) String() string { return proto.CompactTextString(m) }
func (*BrowserInitFlags) ProtoMessage()    {}
func (*BrowserInitFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{2}
}

func (m *BrowserInitFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserInitFlags.Unmarshal(m, b)
}
func (m *BrowserInitFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserInitFlags.Marshal(b, m, deterministic)
}
func (m *BrowserInitFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserInitFlags.Merge(m, src)
}
func (m *BrowserInitFlags) XXX_Size() int {
	return xxx_messageInfo_BrowserInitFlags.Size(m)
}
func (m *BrowserInitFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserInitFlags.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserInitFlags proto.InternalMessageInfo

func (m *BrowserInitFlags) GetFlags() []*BrowserInitFlag {
	if m != nil {
		return m.Flags
	}
	return nil
}

type BrowserLog struct {
	Entry                []string `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowserLog) Reset()         { *m = BrowserLog{} }
func (m *BrowserLog) String() string { return proto.CompactTextString(m) }
func (*BrowserLog) ProtoMessage()    {}
func (*BrowserLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{3}
}

func (m *BrowserLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowserLog.Unmarshal(m, b)
}
func (m *BrowserLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowserLog.Marshal(b, m, deterministic)
}
func (m *BrowserLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowserLog.Merge(m, src)
}
func (m *BrowserLog) XXX_Size() int {
	return xxx_messageInfo_BrowserLog.Size(m)
}
func (m *BrowserLog) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowserLog.DiscardUnknown(m)
}

var xxx_messageInfo_BrowserLog proto.InternalMessageInfo

func (m *BrowserLog) GetEntry() []string {
	if m != nil {
		return m.Entry
	}
	return nil
}

type MouseCoord struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MouseCoord) Reset()         { *m = MouseCoord{} }
func (m *MouseCoord) String() string { return proto.CompactTextString(m) }
func (*MouseCoord) ProtoMessage()    {}
func (*MouseCoord) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{4}
}

func (m *MouseCoord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MouseCoord.Unmarshal(m, b)
}
func (m *MouseCoord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MouseCoord.Marshal(b, m, deterministic)
}
func (m *MouseCoord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MouseCoord.Merge(m, src)
}
func (m *MouseCoord) XXX_Size() int {
	return xxx_messageInfo_MouseCoord.Size(m)
}
func (m *MouseCoord) XXX_DiscardUnknown() {
	xxx_messageInfo_MouseCoord.DiscardUnknown(m)
}

var xxx_messageInfo_MouseCoord proto.InternalMessageInfo

func (m *MouseCoord) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MouseCoord) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type ClickMessage struct {
	// Types that are valid to be assigned to Target:
	//	*ClickMessage_Element
	//	*ClickMessage_Coord
	Target               isClickMessage_Target `protobuf_oneof:"target"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClickMessage) Reset()         { *m = ClickMessage{} }
func (m *ClickMessage) String() string { return proto.CompactTextString(m) }
func (*ClickMessage) ProtoMessage()    {}
func (*ClickMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{5}
}

func (m *ClickMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickMessage.Unmarshal(m, b)
}
func (m *ClickMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickMessage.Marshal(b, m, deterministic)
}
func (m *ClickMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickMessage.Merge(m, src)
}
func (m *ClickMessage) XXX_Size() int {
	return xxx_messageInfo_ClickMessage.Size(m)
}
func (m *ClickMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClickMessage proto.InternalMessageInfo

type isClickMessage_Target interface {
	isClickMessage_Target()
}

type ClickMessage_Element struct {
	Element string `protobuf:"bytes,1,opt,name=element,proto3,oneof"`
}

type ClickMessage_Coord struct {
	Coord *MouseCoord `protobuf:"bytes,2,opt,name=coord,proto3,oneof"`
}

func (*ClickMessage_Element) isClickMessage_Target() {}

func (*ClickMessage_Coord) isClickMessage_Target() {}

func (m *ClickMessage) GetTarget() isClickMessage_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ClickMessage) GetElement() string {
	if x, ok := m.GetTarget().(*ClickMessage_Element); ok {
		return x.Element
	}
	return ""
}

func (m *ClickMessage) GetCoord() *MouseCoord {
	if x, ok := m.GetTarget().(*ClickMessage_Coord); ok {
		return x.Coord
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClickMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClickMessage_Element)(nil),
		(*ClickMessage_Coord)(nil),
	}
}

func init() {
	proto.RegisterType((*BrowserInitFlag)(nil), "info_age.bremote.BrowserInitFlag")
	proto.RegisterType((*NavigateParam)(nil), "info_age.bremote.NavigateParam")
	proto.RegisterType((*BrowserInitFlags)(nil), "info_age.bremote.BrowserInitFlags")
	proto.RegisterType((*BrowserLog)(nil), "info_age.bremote.BrowserLog")
	proto.RegisterType((*MouseCoord)(nil), "info_age.bremote.MouseCoord")
	proto.RegisterType((*ClickMessage)(nil), "info_age.bremote.ClickMessage")
}

func init() { proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c) }

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x8f, 0xd2, 0x40,
	0x10, 0xc7, 0x5b, 0x7b, 0xdc, 0xc1, 0x00, 0x39, 0xb2, 0xb9, 0x28, 0xe1, 0x2e, 0x27, 0xee, 0x13,
	0x2f, 0xf6, 0x12, 0x34, 0xf1, 0xc5, 0xc4, 0x1c, 0xe4, 0x0e, 0x8c, 0x1c, 0x21, 0xed, 0x19, 0x13,
	0x1f, 0x34, 0x0b, 0x0c, 0x6b, 0xbd, 0xd2, 0x25, 0xdb, 0x81, 0xa3, 0x7f, 0xa0, 0xff, 0x97, 0x69,
	0x4b, 0x15, 0xc1, 0x62, 0xe2, 0xdb, 0xce, 0xec, 0xcc, 0xa7, 0xf3, 0xe3, 0xbb, 0x85, 0xca, 0xc4,
	0xf7, 0x30, 0x20, 0x7b, 0xa1, 0x15, 0x29, 0x56, 0xf3, 0x82, 0x99, 0xfa, 0x2a, 0x24, 0xda, 0x63,
	0x8d, 0x73, 0x45, 0xd8, 0x38, 0x97, 0x4a, 0x49, 0x1f, 0xaf, 0x92, 0xfb, 0xf1, 0x72, 0x76, 0x85,
	0xf3, 0x05, 0x45, 0x69, 0x78, 0xa3, 0x4c, 0xd1, 0x02, 0xc3, 0xd4, 0xe0, 0x5f, 0xe0, 0xb4, 0xa3,
	0xd5, 0x63, 0x88, 0xfa, 0x7d, 0xe0, 0xd1, 0xad, 0x2f, 0x24, 0x63, 0x70, 0x34, 0x14, 0x73, 0xac,
	0x9b, 0x4d, 0xb3, 0x55, 0x72, 0x92, 0x33, 0xab, 0xc3, 0x71, 0x48, 0x7a, 0x25, 0xfc, 0xfa, 0x93,
	0xd8, 0xdb, 0x37, 0x9c, 0x8d, 0xcd, 0xce, 0xe0, 0x68, 0x1c, 0xfb, 0xad, 0xa6, 0xd9, 0x2a, 0xf6,
	0x0d, 0x27, 0xb1, 0x3a, 0x27, 0x50, 0x58, 0x09, 0x7f, 0x89, 0xfc, 0x1a, 0xaa, 0x43, 0xb1, 0xf2,
	0xa4, 0x20, 0x1c, 0x09, 0x2d, 0xe6, 0xac, 0x06, 0xd6, 0x47, 0xed, 0x6f, 0xe0, 0xf1, 0x91, 0x5d,
	0x02, 0x0c, 0x71, 0x4d, 0x2e, 0x09, 0x5a, 0x86, 0x29, 0xdf, 0xd9, 0xf2, 0xf0, 0x0f, 0x50, 0xdb,
	0x29, 0x31, 0x64, 0x6f, 0xa0, 0x30, 0x8b, 0x0f, 0x75, 0xb3, 0x69, 0xb5, 0xca, 0xed, 0x17, 0xf6,
	0xee, 0x08, 0xec, 0x9d, 0x14, 0x27, 0x8d, 0xe7, 0x1c, 0x60, 0x73, 0x33, 0x50, 0x92, 0x9d, 0x41,
	0x01, 0x03, 0xd2, 0x51, 0x82, 0x29, 0x39, 0xa9, 0xc1, 0x5b, 0x00, 0x77, 0x6a, 0x19, 0x62, 0x57,
	0x29, 0x3d, 0x65, 0x15, 0x30, 0xd7, 0x49, 0xb9, 0x96, 0x63, 0xae, 0x63, 0x2b, 0x4a, 0x6a, 0xb4,
	0x1c, 0x33, 0xe2, 0xdf, 0xa1, 0xd2, 0xf5, 0xbd, 0xc9, 0xc3, 0x1d, 0x86, 0xa1, 0x90, 0xc8, 0x1a,
	0x70, 0x82, 0x3e, 0xce, 0x31, 0xa0, 0xb4, 0xc1, 0xbe, 0xe1, 0x64, 0x0e, 0xf6, 0x1a, 0x0a, 0x93,
	0x18, 0x98, 0x64, 0x97, 0xdb, 0x17, 0xfb, 0x25, 0xff, 0xfe, 0x68, 0xdf, 0x70, 0xd2, 0xe0, 0x4e,
	0x11, 0x8e, 0x49, 0x68, 0x89, 0xd4, 0xfe, 0x51, 0x80, 0x6a, 0x37, 0x59, 0xbb, 0x8b, 0x7a, 0xe5,
	0x4d, 0x90, 0xbd, 0x85, 0xa3, 0x91, 0x17, 0x48, 0x56, 0xdf, 0x47, 0xb9, 0xa4, 0xbd, 0x40, 0x36,
	0x72, 0x6f, 0xb8, 0xc1, 0x06, 0x50, 0x71, 0x49, 0x68, 0xda, 0x8c, 0x83, 0xf1, 0x7f, 0xce, 0x30,
	0x6c, 0x3c, 0xb5, 0x53, 0x61, 0xd9, 0x99, 0xb0, 0xec, 0x9b, 0x58, 0x58, 0xdc, 0x60, 0x37, 0x50,
	0xcc, 0xf6, 0xcc, 0x9e, 0xef, 0x93, 0xfe, 0xd0, 0xc0, 0x01, 0x4c, 0x17, 0x4e, 0xdd, 0x6f, 0x4b,
	0x9a, 0xaa, 0xc7, 0x20, 0xab, 0x2b, 0x27, 0xf8, 0x00, 0xe4, 0x1d, 0x94, 0x7a, 0xb8, 0x51, 0x4f,
	0x6e, 0xfa, 0xa1, 0xd1, 0x74, 0xa0, 0xd2, 0x43, 0xea, 0xdf, 0xdf, 0x8f, 0xdc, 0xeb, 0xe9, 0x54,
	0xff, 0x17, 0xa3, 0x07, 0xd5, 0x1e, 0xd2, 0x96, 0xd6, 0xf2, 0x20, 0x17, 0xb9, 0x73, 0x1f, 0x28,
	0x99, 0x76, 0xe3, 0xfe, 0xea, 0x26, 0x7f, 0xd5, 0x87, 0x56, 0x53, 0xfb, 0x84, 0xe3, 0x50, 0x4d,
	0x1e, 0x90, 0x32, 0xa1, 0x3e, 0xfb, 0xcb, 0x47, 0x23, 0xc2, 0x43, 0x1b, 0xbe, 0xcd, 0x5e, 0x45,
	0x2c, 0x78, 0x76, 0xb9, 0x0f, 0xd8, 0x7e, 0x09, 0xf9, 0x9c, 0x0e, 0x87, 0xf3, 0x00, 0x29, 0x49,
	0x7f, 0xb9, 0x9d, 0x9e, 0xfe, 0xd2, 0x3e, 0x5b, 0x62, 0xe1, 0x8d, 0x8f, 0x93, 0xac, 0x57, 0x3f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x0c, 0xb9, 0x1d, 0xe8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	Ping(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	StartBrowser(ctx context.Context, in *BrowserInitFlags, opts ...grpc.CallOption) (*empty.Empty, error)
	Navigate(ctx context.Context, in *NavigateParam, opts ...grpc.CallOption) (*empty.Empty, error)
	ShutdownBrowser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	GetHTTPSAddr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error)
	GetBrowserLog(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BrowserLog, error)
	SetStatus(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error)
	WebsocketMessage(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*empty.Empty, error)
	MouseClick(ctx context.Context, in *ClickMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) Ping(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) StartBrowser(ctx context.Context, in *BrowserInitFlags, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/StartBrowser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Navigate(ctx context.Context, in *NavigateParam, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/Navigate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ShutdownBrowser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/ShutdownBrowser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetHTTPSAddr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/GetHTTPSAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetBrowserLog(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BrowserLog, error) {
	out := new(BrowserLog)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/GetBrowserLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) SetStatus(ctx context.Context, in *String, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) WebsocketMessage(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/WebsocketMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) MouseClick(ctx context.Context, in *ClickMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/info_age.bremote.ClientService/MouseClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	Ping(context.Context, *String) (*String, error)
	StartBrowser(context.Context, *BrowserInitFlags) (*empty.Empty, error)
	Navigate(context.Context, *NavigateParam) (*empty.Empty, error)
	ShutdownBrowser(context.Context, *empty.Empty) (*empty.Empty, error)
	GetStatus(context.Context, *empty.Empty) (*String, error)
	GetHTTPSAddr(context.Context, *empty.Empty) (*String, error)
	GetBrowserLog(context.Context, *empty.Empty) (*BrowserLog, error)
	SetStatus(context.Context, *String) (*empty.Empty, error)
	WebsocketMessage(context.Context, *Bytes) (*empty.Empty, error)
	MouseClick(context.Context, *ClickMessage) (*empty.Empty, error)
}

// UnimplementedClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (*UnimplementedClientServiceServer) Ping(ctx context.Context, req *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedClientServiceServer) StartBrowser(ctx context.Context, req *BrowserInitFlags) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBrowser not implemented")
}
func (*UnimplementedClientServiceServer) Navigate(ctx context.Context, req *NavigateParam) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Navigate not implemented")
}
func (*UnimplementedClientServiceServer) ShutdownBrowser(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownBrowser not implemented")
}
func (*UnimplementedClientServiceServer) GetStatus(ctx context.Context, req *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedClientServiceServer) GetHTTPSAddr(ctx context.Context, req *empty.Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHTTPSAddr not implemented")
}
func (*UnimplementedClientServiceServer) GetBrowserLog(ctx context.Context, req *empty.Empty) (*BrowserLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrowserLog not implemented")
}
func (*UnimplementedClientServiceServer) SetStatus(ctx context.Context, req *String) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (*UnimplementedClientServiceServer) WebsocketMessage(ctx context.Context, req *Bytes) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsocketMessage not implemented")
}
func (*UnimplementedClientServiceServer) MouseClick(ctx context.Context, req *ClickMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MouseClick not implemented")
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Ping(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_StartBrowser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserInitFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).StartBrowser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/StartBrowser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).StartBrowser(ctx, req.(*BrowserInitFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Navigate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Navigate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/Navigate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Navigate(ctx, req.(*NavigateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ShutdownBrowser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ShutdownBrowser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/ShutdownBrowser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ShutdownBrowser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetHTTPSAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetHTTPSAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/GetHTTPSAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetHTTPSAddr(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetBrowserLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetBrowserLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/GetBrowserLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetBrowserLog(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SetStatus(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_WebsocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).WebsocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/WebsocketMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).WebsocketMessage(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_MouseClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).MouseClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info_age.bremote.ClientService/MouseClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).MouseClick(ctx, req.(*ClickMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "info_age.bremote.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ClientService_Ping_Handler,
		},
		{
			MethodName: "StartBrowser",
			Handler:    _ClientService_StartBrowser_Handler,
		},
		{
			MethodName: "Navigate",
			Handler:    _ClientService_Navigate_Handler,
		},
		{
			MethodName: "ShutdownBrowser",
			Handler:    _ClientService_ShutdownBrowser_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ClientService_GetStatus_Handler,
		},
		{
			MethodName: "GetHTTPSAddr",
			Handler:    _ClientService_GetHTTPSAddr_Handler,
		},
		{
			MethodName: "GetBrowserLog",
			Handler:    _ClientService_GetBrowserLog_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _ClientService_SetStatus_Handler,
		},
		{
			MethodName: "WebsocketMessage",
			Handler:    _ClientService_WebsocketMessage_Handler,
		},
		{
			MethodName: "MouseClick",
			Handler:    _ClientService_MouseClick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
